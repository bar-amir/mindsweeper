# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import server_pb2 as server__pb2


class MessengerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendUser = channel.unary_unary(
                '/Messenger/SendUser',
                request_serializer=server__pb2.UserMessage.SerializeToString,
                response_deserializer=server__pb2.SendResponse.FromString,
                )
        self.SendPose = channel.unary_unary(
                '/Messenger/SendPose',
                request_serializer=server__pb2.PoseMessage.SerializeToString,
                response_deserializer=server__pb2.SendResponse.FromString,
                )
        self.SendColorImage = channel.unary_unary(
                '/Messenger/SendColorImage',
                request_serializer=server__pb2.ColorImageMessage.SerializeToString,
                response_deserializer=server__pb2.SendResponse.FromString,
                )
        self.SendDepthImage = channel.unary_unary(
                '/Messenger/SendDepthImage',
                request_serializer=server__pb2.DepthImageMessage.SerializeToString,
                response_deserializer=server__pb2.SendResponse.FromString,
                )
        self.SendFeelings = channel.unary_unary(
                '/Messenger/SendFeelings',
                request_serializer=server__pb2.FeelingsMessage.SerializeToString,
                response_deserializer=server__pb2.SendResponse.FromString,
                )


class MessengerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def SendUser(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPose(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendColorImage(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendDepthImage(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFeelings(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessengerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SendUser,
                    request_deserializer=server__pb2.UserMessage.FromString,
                    response_serializer=server__pb2.SendResponse.SerializeToString,
            ),
            'SendPose': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPose,
                    request_deserializer=server__pb2.PoseMessage.FromString,
                    response_serializer=server__pb2.SendResponse.SerializeToString,
            ),
            'SendColorImage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendColorImage,
                    request_deserializer=server__pb2.ColorImageMessage.FromString,
                    response_serializer=server__pb2.SendResponse.SerializeToString,
            ),
            'SendDepthImage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDepthImage,
                    request_deserializer=server__pb2.DepthImageMessage.FromString,
                    response_serializer=server__pb2.SendResponse.SerializeToString,
            ),
            'SendFeelings': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFeelings,
                    request_deserializer=server__pb2.FeelingsMessage.FromString,
                    response_serializer=server__pb2.SendResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Messenger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Messenger(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def SendUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/SendUser',
            server__pb2.UserMessage.SerializeToString,
            server__pb2.SendResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/SendPose',
            server__pb2.PoseMessage.SerializeToString,
            server__pb2.SendResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendColorImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/SendColorImage',
            server__pb2.ColorImageMessage.SerializeToString,
            server__pb2.SendResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendDepthImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/SendDepthImage',
            server__pb2.DepthImageMessage.SerializeToString,
            server__pb2.SendResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendFeelings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messenger/SendFeelings',
            server__pb2.FeelingsMessage.SerializeToString,
            server__pb2.SendResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
